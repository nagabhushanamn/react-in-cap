


A. Intoduction


--------------------------------------
web-ui
--------------------------------------

ui = data + style + behav


 content  ==> HTML
 style    ==> CSS
 behavior ==> javascript


what javascript language can do on HTML-page 
in browser envi?


using w3c standard web APIs, 
javascript programs can do any dynamic actions on web-page within browser-envi


w3c standard web APIs
    ==> DOM, XHR, Timer, ...


imp-note:
   all w3c standard APIs are implemented by browser vendors nativly,
   and abstracted ti us as javascript objects & functions    


using DOM API
----------------
=> for page manipulation 
 -> can create,retreive,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program
 -> can create rich UI-components like  autocomplete, calenders,..
 ....

using XHR / Fetch API
-------------------------
 => for Async communication with server-side programs

using Timer API
------------------
=> to execute some action(s) on timeout/interval


HTML5 New APIs 
----------------
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5






------------------------------------------------------
limitations/complexities of plain-js(your code ) with browser APIs
------------------------------------------------------ 


 => browser compatibility issues
 => memory management issues should care manually
    ( i.e clean un-used/invisible DOM elements )
 => performance issues should care manually    
    ( i.e DOM access must be minimal ) 
 => data binding is manual/complex 
 => code organization is complex 
    i.e ( View & Model/State is tightly coupled)
 => too much code for simple dynamic site 



 legacy solution:

   => using server-side page technologies   

      e.g ASP.NET, JSP , PHP , etc....


limitations on server-side page technologies:
---------------------------------------------

=>  on every request, 
    server-side programs must re-construct new-page,
    with client prev state  

=> on every request,
    server always transfer same static resources with page,
    will increase n/w b/w

=> on every new page,
   browser reloads existing page.




modern solution:

      => using client-side page/ui technologies 

      How ?

      => using advanced javascript syntax & apis
      => new browser apis are introduced ( i.e HTML5 APIs)
      => all moderns browsers follows APIs in uniform way
        +
      => using third-party's javascript lib & frameworks




   javascript utility lib
   -----------------------

   1. jQuery

      => DOM & XHR utility lib  

         limitations on jquery

            --> design & performance issues

   mvc based lib & F.W
   --------------------------

   1. backbone.js
   2. knockout.js
   3. ember.js
   4. angular.js  ( popular )
   ....

 limitation with MVC on UI-application

   ==> un-predictable data flow b/w Model & View,
       due to 2-way data-binding

   ==> can't build re-usable UI fragments/components     


   soln:

   ==>  component based arch 


   how to development UI components ?

      way-1 : using w3c standard apis 
      --------------------------------

         => HTML template
         => shadow DOM
         => custom elements


      way-2 : using third party's js lib & F.Ws
      ------------------------------------------

         a. react.js from facebook  : v17  ( our focus )
         b. angular                 : v7
         c. Vue
         d. polymer.js
         ..

      -------------------------------------------  




      component based UI arch
      -------------------------

      what is component in UI ?

      ==> any UI-fragment with single responsibility ( i.e simpler & smaller)

         e.g <input/>, <calender /> .....


        imp-note :

         => by default HTML follows 'component based arch '



      principles of component(s)
      -------------------------
      => must have single-responsibility 
         -> to keep smaller & simpler
      => must be loosely from other
         -> to re-use anywhere
      => can take props from parent-component
         -> to customize based on requirement
      => must not mutate given props   
         -> to keep data consistency
      => can be stateless & statefull
      => state is mutable
         -> can mutate on event
      => on state change , component must re-render  
      => inter-component communication should happen via parent   

      uni-directional data-flow

         => parent to child ==> via props
         => child to parent ==>> via events


  -----------------------------------------


      sometime we need components like 

      <calender /> 
      <box />
      <search /> 
      <graph />


      to create this type of custom components,
      we r going to use react.js 'libray'

      -----------------------------------------


      -> Node.js runtime
      -> npm
      -> vs code


    to dev front-end application , following env setup required

      -> transpiler       e.g babel , typescript-compiler, ...
      -> module bundler   e.g webpack
      -> linting tools    e.g es-lint
      -> unit-testing     e.g jest , enzyme , mocks,  jdom ,.....
      -> dev-web-server   e.g webpack-dev-server
      -> production build
      
      from facebook, we got cli tools`

       - create-react-app tool


   -----------------------------------------
   how to create new react application
   -----------------------------------------

   > node -v
   > npm -v

   > npm i -g create-react-app
   > npm i -g yarn

on workspace

   > create-react-app <app-name>

   > cd <app-name>

   > npm start or yarn start

   -----------------------------------------



   Arch.. design issues  with 'react' only
   ------------------------------------------

   ===> state/model/ui-data is scattered across UI components
   ===> state & state-change logic & network/service calls 
   are tightly-coupled with UI components
   ===> if same state is required in multiple components 
   either we should duplicate that state in components or we should pass via input properties 
   ===> Unit-Testing is very difficult in components
   ===> we cant re-use same components across diffent pages or applications




   soln:

   ==> isolate common state & state change logic & n/wing logic 
   from UI components



   How ?

   way-1 : using MVC Arch pattern

            --> bi-directional data-flow  b/w view & state/model


    
   way-2 : Flux pattern  ( from facebook )

            --> uni-directional data-flow  b/w view & state/model      
                     


-------------------------------------------------------------------



steps to do state management with redux-lib


UI  ==>  Eat-IT



    

//---------------------------------------------
step-1 : identify state/model/data(s) & r/s b/w them, 
         that represents UI
//---------------------------------------------


 - items
 - reviews
 - cart
 - orders
 - user
 ......



//---------------------------------------------
step-2 : identify action(s) which cause state change
//---------------------------------------------

 - LOAD_ITEMS
 - LOAD_REVIEWS
 - ADD_NEW_REVIEW
 - BUY
 - CHECKOUT
 - LOGIN

 - REQUEST_BEGIN
 - REQUEST_SUCCESS
 - REQUEST_ERROR
......




//---------------------------------------------
step-3 : create action(s) by action-creator(s) / operations
//---------------------------------------------


e.g function loadItems(food,10){
    //...............................
    return {type:LOAD_ITEMS_SUCCESS,[]}  // Action
}




//---------------------------------------------
step-4 : process action(s) by reducer(s)  & do state change
//---------------------------------------------

e.g  function itemsReducer(state,action){
      //....
      return new-state
     }


     imp-note: 
     
     - reducer never do any mutable/side effects i.e immutable operations


//---------------------------------------------
step-5 : combine/compose all reducer(s) as root-reducer
//---------------------------------------------

i.e function composition



//---------------------------------------------
step-6 : create store with root-reducer
//---------------------------------------------






    

